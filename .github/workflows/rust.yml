# blatantly lifted from https://github.com/init4tech/actions/blob/main/.github/workflows/rust-base.yml
name: Rust

on:
  push:
    branches: [main]
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  pull_request:

jobs:
  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: make format-check

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2

      - name: Lint
        run: make lint-check

  # TODO: eventually move this to a separate workflow
  # if: startsWith(github.ref, 'refs/tags/')
  release:
    name: Create Release
    needs: [fmt, lint]

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            targets: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu
          - os: macos-latest
            targets: x86_64-apple-darwin,aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Initialize Git submodules
        run: git submodule update --init --recursive
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.targets }}
      - name: Add Rust targets
        run: |
          IFS=',' read -ra TARGET_ARRAY <<< "${{ matrix.targets }}"
          for target in "${TARGET_ARRAY[@]}"; do
            rustup target add $target
          done
      # Install cross-compilation tools on Linux
      - name: Install cross-compilation tools
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      - uses: Swatinem/rust-cache@v2
      - name: Build Release Binaries
        run: |
          IFS=',' read -ra TARGET_ARRAY <<< "${{ matrix.targets }}"
          for target in "${TARGET_ARRAY[@]}"; do
            echo "Building for $target"
            if [ "$target" = "aarch64-unknown-linux-gnu" ]; then
              CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc \
              make build target=$target
            else
              make build target=$target
            fi
            
            # Get OS from target
            os=$(echo $target | cut -d'-' -f2)
            arch=$(echo $target | cut -d'-' -f1)
            
            # Create directory if it doesn't exist and copy binaries
            mkdir -p target/$target/release/
            cp -f target/$target/release/pcl pcl-$arch-$os || true
            cp -f target/$target/release/phorge phorge-$arch-$os || true
          done
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            pcl-*
            phorge-*
          draft: false
          prerelease: false
          generate_release_notes: true
