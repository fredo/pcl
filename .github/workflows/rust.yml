# blatantly lifted from https://github.com/init4tech/actions/blob/main/.github/workflows/rust-base.yml
name: Rust

on:
  push:
    branches: [main]
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  pull_request:

jobs:
  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: make format-check

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2

      - name: Lint
        run: make lint-check

  release:
    needs: [fmt, lint]
    if: startsWith(github.ref, 'refs/tags/')
    timeout-minutes: 60 # 60 minutes
    name: Create Release for ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Initialize Git submodules
        run: git submodule update --init --recursive
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          target: ${{ matrix.target }}
          override: true
          components: rust-src
      - uses: Swatinem/rust-cache@v2

      # Install cross for all builds
      - name: Install cross
        run: cargo install cross

      # Configure cross for Linux builds
      - name: Configure cross for Linux
        if: runner.os == 'Linux'
        run: |
          # Create Cross.toml with OpenSSL configuration
          echo '[target.x86_64-unknown-linux-gnu]' > Cross.toml
          echo 'image = "ghcr.io/cross-rs/x86_64-unknown-linux-gnu:main"' >> Cross.toml
          echo '' >> Cross.toml
          echo '[target.aarch64-unknown-linux-gnu]' >> Cross.toml
          echo 'image = "ghcr.io/cross-rs/aarch64-unknown-linux-gnu:main"' >> Cross.toml

      # Create a temporary Cargo config for vendored dependencies
      - name: Configure vendored dependencies
        run: |
          mkdir -p .cargo
          echo '[dependencies.openssl-sys]' > .cargo/config.toml
          echo 'features = ["vendored"]' >> .cargo/config.toml

      # Build for all targets
      - name: Build Release
        run: |
          # Explicitly add the target to be extra cautious
          rustup target add ${{ matrix.target }}

          # Use cross for all builds
          cross build --release --target ${{ matrix.target }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            pcl-*
            phorge-*
          draft: false
          prerelease: false
          generate_release_notes: true
